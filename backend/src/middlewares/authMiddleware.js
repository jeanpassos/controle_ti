/**
 * Middleware de autentica√ß√£o JWT
 * Verifica se o token de acesso √© v√°lido e adiciona os dados do usu√°rio ao objeto de requisi√ß√£o
 */

const jwt = require('jsonwebtoken');
const { PrismaClient } = require('@prisma/client');
const prisma = new PrismaClient();

/**
 * Middleware para verificar autentica√ß√£o via JWT
 */
const authMiddleware = async (req, res, next) => {
  console.log('üö® MIDDLEWARE EXECUTADO - authMiddleware chamado para:', req.method, req.originalUrl);
  console.log('üîê authMiddleware - Iniciando verifica√ß√£o de autentica√ß√£o');
  console.log('üîê authMiddleware - URL:', req.method, req.originalUrl);
  
  // Verifica se o header de autoriza√ß√£o existe
  const authHeader = req.headers.authorization;
  console.log('üîê authMiddleware - Header Authorization:', authHeader ? 'presente' : 'ausente');
  
  if (!authHeader) {
    console.log('‚ùå authMiddleware - Token n√£o fornecido');
    return res.status(401).json({ 
      erro: 'Token n√£o fornecido',
      codigo: 'token_ausente' 
    });
  }

  // Extrai o token do header (Bearer token)
  const parts = authHeader.split(' ');
  console.log('üîê authMiddleware - Partes do header:', parts.length);
  
  if (parts.length !== 2) {
    console.log('‚ùå authMiddleware - Formato de token inv√°lido - partes:', parts.length);
    return res.status(401).json({ 
      erro: 'Formato de token inv√°lido',
      codigo: 'token_formato_invalido'
    });
  }

  const [scheme, token] = parts;
  console.log('üîê authMiddleware - Scheme:', scheme);
  console.log('üîê authMiddleware - Token presente:', token ? 'sim' : 'n√£o');
  console.log('üîê authMiddleware - Token recebido (primeiros 50 chars):', token ? token.substring(0, 50) + '...' : 'nenhum');

  // Verifica se o token come√ßa com Bearer
  if (!/^Bearer$/i.test(scheme)) {
    console.log('‚ùå authMiddleware - Scheme inv√°lido:', scheme);
    return res.status(401).json({ 
      erro: 'Formato de token inv√°lido',
      codigo: 'token_formato_invalido'
    });
  }

  try {
    console.log('üîê authMiddleware - Verificando token JWT...');
    console.log('üîê authMiddleware - Tamanho do token:', token.length);
    console.log('üîê authMiddleware - Token completo:', token);
    
    // Verifica se o token √© v√°lido
    const decoded = jwt.verify(token, process.env.JWT_SECRET);
    console.log('üîê authMiddleware - Token decodificado:', {
      userId: decoded.userId,
      email: decoded.email,
      exp: decoded.exp,
      iat: decoded.iat
    });

    console.log('üîê authMiddleware - Buscando usu√°rio no banco...');
    // Verifica se o usu√°rio existe (usando userId do payload)
    const usuario = await prisma.usuario.findUnique({
      where: { id: decoded.userId }, // Corrigido de decoded.id para decoded.userId
      include: { 
        nivel: true 
      },
    });

    console.log('üîê authMiddleware - Usu√°rio encontrado:', usuario ? usuario.email : 'n√£o encontrado');

    if (!usuario) {
      console.log('‚ùå authMiddleware - Usu√°rio n√£o encontrado no banco');
      return res.status(401).json({ 
        erro: 'Usu√°rio n√£o encontrado',
        codigo: 'usuario_nao_encontrado'
      });
    }

    if (!usuario.ativo) {
      console.log('‚ùå authMiddleware - Usu√°rio inativo');
      return res.status(401).json({ 
        erro: 'Usu√°rio inativo',
        codigo: 'usuario_inativo'
      });
    }

    console.log('‚úÖ authMiddleware - Usu√°rio autenticado:', {
      id: usuario.id,
      email: usuario.email,
      nivel_id: usuario.nivel_id,
      ativo: usuario.ativo
    });

    // Adiciona o usu√°rio e n√≠vel de acesso ao objeto de requisi√ß√£o
    req.usuario = {
      id: usuario.id,
      nome: usuario.nome,
      email: usuario.email,
      nivel_id: usuario.nivel_id,
      nivel: usuario.nivel?.nome || 'N√£o definido',
      permissoes: usuario.nivel?.permissoes || null,
    };

    console.log('‚úÖ authMiddleware - Autentica√ß√£o bem-sucedida, prosseguindo...');
    return next();
  } catch (error) {
    console.error('‚ùå authMiddleware - Erro na verifica√ß√£o do token:', error);
    
    if (error.name === 'TokenExpiredError') {
      console.log('‚ùå authMiddleware - Token expirado');
      return res.status(401).json({ 
        erro: 'Token expirado',
        codigo: 'token_expirado'
      });
    }

    if (error.name === 'JsonWebTokenError') {
      console.log('‚ùå authMiddleware - Token JWT inv√°lido:', error.message);
      return res.status(401).json({ 
        erro: 'Token inv√°lido',
        codigo: 'token_invalido'
      });
    }

    console.log('‚ùå authMiddleware - Erro desconhecido:', error.message);
    return res.status(401).json({ 
      erro: 'Token inv√°lido',
      codigo: 'token_invalido'
    });
  }
};

/**
 * Middleware para verificar se o usu√°rio tem n√≠vel de acesso suficiente
 * @param {number} nivelMinimo - N√≠vel m√≠nimo de acesso necess√°rio
 */
const verificarNivel = (nivelMinimo) => {
  return (req, res, next) => {
    // Verifica se o middleware de autentica√ß√£o j√° foi executado
    if (!req.usuario) {
      return res.status(500).json({ 
        erro: 'Middleware de autentica√ß√£o deve ser executado antes',
        codigo: 'erro_middleware'
      });
    }

    // Obt√©m o n√≠vel de acesso do usu√°rio
    const nivelUsuario = req.usuario.nivel_id;

    if (nivelUsuario < nivelMinimo) {
      return res.status(403).json({ 
        erro: 'N√≠vel de acesso insuficiente',
        codigo: 'acesso_insuficiente',
        nivelRequerido: nivelMinimo,
        nivelAtual: nivelUsuario
      });
    }

    return next();
  };
};

/**
 * Middleware para verificar permiss√µes espec√≠ficas
 * @param {string} permissao - Permiss√£o necess√°ria (ex: 'usuarios.criar')
 */
const verificarPermissao = (permissao) => {
  return (req, res, next) => {
    // Verifica se o middleware de autentica√ß√£o j√° foi executado
    if (!req.usuario) {
      return res.status(500).json({ 
        erro: 'Middleware de autentica√ß√£o deve ser executado antes',
        codigo: 'erro_middleware'
      });
    }

    // Se o usu√°rio for n√≠vel m√°ximo (admin), sempre permite
    if (req.usuario.nivel_id === 4) {
      return next();
    }

    // Verifica se o usu√°rio tem a permiss√£o espec√≠fica
    const permissoes = req.usuario.permissoes;
    if (!permissoes) {
      return res.status(403).json({ 
        erro: 'Sem permiss√µes definidas',
        codigo: 'sem_permissoes'
      });
    }

    // Verifica se a permiss√£o existe na lista de permiss√µes do usu√°rio
    const temPermissao = permissoes.includes(permissao);
    if (!temPermissao) {
      return res.status(403).json({ 
        erro: `Permiss√£o '${permissao}' necess√°ria`,
        codigo: 'permissao_negada'
      });
    }

    return next();
  };
};

module.exports = authMiddleware;
module.exports.verificarNivel = verificarNivel;
module.exports.verificarPermissao = verificarPermissao;
