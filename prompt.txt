Você é um arquiteto de software full-stack sênior especializado em aplicações empresariais elegantes e responsivas.

OBJETIVO  
Criar uma aplicação web de **Gestão de Equipamentos** com dashboard e relatórios em tempo real.

1. CADASTROS PRINCIPAIS  
   • **Equipamentos**: tipo (notebook, desktop, servidor, etc.), fabricante, modelo, n.º de série, n.º de patrimônio, status (disponível, locado, manutenção, fora de uso), data de aquisição, departamento, empresa compradora, localização física, observações.  
   • **Tabelas de apoio**: Categorias, Estados, Cidades, Departamentos, Localizações, Status.  
   • **Usuários e níveis**: administrador, gestor, técnico, usuário-final.

2. MÓDULO CONFIGURAÇÕES  
   • Geral (nome do sistema, idioma, fuso-horário).  
   • Banco de Dados (host, porta, usuário, senha, backup manual).  
   • Segurança (política de senha, 2FA, limites de login).  
   • Personalização (cores, logotipo, ícones).  
   • Logs de auditoria (CRUD, login, exportação, relatórios).

3. INTERFACE & UX  
   • Visual inspirado em **WhatsApp** (navegação simples) e **Apple** (minimalismo elegante).  
   • **Menu lateral fixo** com sub-menus recolhíveis; todas as telas herdam o mesmo layout base.  
   • Dashboard com KPIs (total de equipamentos, % em manutenção, aquisições por mês…).  
   • Responsivo (desktop → tablet → mobile) e tema claro/escuro alternável.

4. RELATÓRIOS  
   • Inventário completo (CSV, PDF).  
   • Equipamentos por status, departamento, empresa.  
   • Histórico de movimentação (check-in/out).

5. REQUISITOS TÉCNICOS  
   • **Sem Docker** – instalações locais/VMs.  
   • **Front-end**: React + Tailwind (ou CSS-in-JS) — servidor na porta **5020**.  
   • **Back-end**: Node.js / Express (REST) — servidor fixo na porta **4020**.  
   • **Banco**: MariaDB **remoto**  
     - host: **192.168.1.65**  
     - user: **root**  
     - password: **Imp3r@tr1z**  
     - database: **controle_ti**  
     (→ Defina essas credenciais em variáveis de ambiente; nunca commitá-las em código).  
   • Autenticação JWT + refresh tokens.  
   • Testes unitários / integração (coverage ≥ 80 %).  
   • Scripts de seed & migração via ORM (ex.: Prisma ou Sequelize).  

ENTREGÁVEIS  
▪ Diagrama de arquitetura (camadas, pastas, entidades).  
▪ Modelo ER.  
▪ Código-fonte comentado.  
▪ Scripts de seed/migração.  
▪ Guia de implantação on-premise (README).

CRITÉRIOS DE ACEITE  
▪ Layout e usabilidade idênticos em todas as telas.  
▪ Primeiro carregamento < 2 s em rede 4G.  
▪ Acessibilidade WCAG AA.  

RESPONDA PRIMEIRO COM:  
1. Lista de tabelas e campos.  
2. Estrutura inicial de rotas API (GET/POST/PUT/DELETE).  
3. Esboço da árvore de componentes da UI.  
4. Próximos passos.  

Não gere código agora; apresente apenas a especificação técnica detalhada.
